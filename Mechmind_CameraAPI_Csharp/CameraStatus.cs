// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: cameraStatus.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mmind {

  /// <summary>Holder for reflection information generated from cameraStatus.proto</summary>
  public static partial class CameraStatusReflection {

    #region Descriptor
    /// <summary>File descriptor for cameraStatus.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CameraStatusReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJjYW1lcmFTdGF0dXMucHJvdG8SBW1taW5kIrEBCgxDYW1lcmFTdGF0dXMS",
            "CgoCaXAYASABKAkSDwoHdmVyc2lvbhgCIAEoCRIQCghzZXJpYWxJZBgDIAMo",
            "CRINCgVleWVJZBgEIAEoCRISCgpjYW1lcmFUeXBlGAUgASgFEg4KBmNvbW1p",
            "dBgGIAEoCRIMCgR0ZW1wGAcgASgJEg8KB2lzTGludXgYCCABKAgSEgoKaXNV",
            "YnVudHUxOBgJIAEoCBIMCgR0aW1lGAogASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mmind.CameraStatus), global::Mmind.CameraStatus.Parser, new[]{ "Ip", "Version", "SerialId", "EyeId", "CameraType", "Commit", "Temp", "IsLinux", "IsUbuntu18", "Time" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CameraStatus : pb::IMessage<CameraStatus> {
    private static readonly pb::MessageParser<CameraStatus> _parser = new pb::MessageParser<CameraStatus>(() => new CameraStatus());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraStatus> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mmind.CameraStatusReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraStatus() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraStatus(CameraStatus other) : this() {
      ip_ = other.ip_;
      version_ = other.version_;
      serialId_ = other.serialId_.Clone();
      eyeId_ = other.eyeId_;
      cameraType_ = other.cameraType_;
      commit_ = other.commit_;
      temp_ = other.temp_;
      isLinux_ = other.isLinux_;
      isUbuntu18_ = other.isUbuntu18_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraStatus Clone() {
      return new CameraStatus(this);
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 1;
    private string ip_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Ip {
      get { return ip_; }
      set {
        ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private string version_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serialId" field.</summary>
    public const int SerialIdFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_serialId_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> serialId_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SerialId {
      get { return serialId_; }
    }

    /// <summary>Field number for the "eyeId" field.</summary>
    public const int EyeIdFieldNumber = 4;
    private string eyeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EyeId {
      get { return eyeId_; }
      set {
        eyeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cameraType" field.</summary>
    public const int CameraTypeFieldNumber = 5;
    private int cameraType_;
    /// <summary>
    ///0: S3, 1: P-series cameras
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CameraType {
      get { return cameraType_; }
      set {
        cameraType_ = value;
      }
    }

    /// <summary>Field number for the "commit" field.</summary>
    public const int CommitFieldNumber = 6;
    private string commit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Commit {
      get { return commit_; }
      set {
        commit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "temp" field.</summary>
    public const int TempFieldNumber = 7;
    private string temp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Temp {
      get { return temp_; }
      set {
        temp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isLinux" field.</summary>
    public const int IsLinuxFieldNumber = 8;
    private bool isLinux_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsLinux {
      get { return isLinux_; }
      set {
        isLinux_ = value;
      }
    }

    /// <summary>Field number for the "isUbuntu18" field.</summary>
    public const int IsUbuntu18FieldNumber = 9;
    private bool isUbuntu18_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsUbuntu18 {
      get { return isUbuntu18_; }
      set {
        isUbuntu18_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 10;
    private string time_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraStatus);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraStatus other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ip != other.Ip) return false;
      if (Version != other.Version) return false;
      if(!serialId_.Equals(other.serialId_)) return false;
      if (EyeId != other.EyeId) return false;
      if (CameraType != other.CameraType) return false;
      if (Commit != other.Commit) return false;
      if (Temp != other.Temp) return false;
      if (IsLinux != other.IsLinux) return false;
      if (IsUbuntu18 != other.IsUbuntu18) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ip.Length != 0) hash ^= Ip.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      hash ^= serialId_.GetHashCode();
      if (EyeId.Length != 0) hash ^= EyeId.GetHashCode();
      if (CameraType != 0) hash ^= CameraType.GetHashCode();
      if (Commit.Length != 0) hash ^= Commit.GetHashCode();
      if (Temp.Length != 0) hash ^= Temp.GetHashCode();
      if (IsLinux != false) hash ^= IsLinux.GetHashCode();
      if (IsUbuntu18 != false) hash ^= IsUbuntu18.GetHashCode();
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ip.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Ip);
      }
      if (Version.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Version);
      }
      serialId_.WriteTo(output, _repeated_serialId_codec);
      if (EyeId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(EyeId);
      }
      if (CameraType != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(CameraType);
      }
      if (Commit.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Commit);
      }
      if (Temp.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Temp);
      }
      if (IsLinux != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsLinux);
      }
      if (IsUbuntu18 != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsUbuntu18);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ip.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
      }
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      size += serialId_.CalculateSize(_repeated_serialId_codec);
      if (EyeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EyeId);
      }
      if (CameraType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CameraType);
      }
      if (Commit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Commit);
      }
      if (Temp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Temp);
      }
      if (IsLinux != false) {
        size += 1 + 1;
      }
      if (IsUbuntu18 != false) {
        size += 1 + 1;
      }
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraStatus other) {
      if (other == null) {
        return;
      }
      if (other.Ip.Length != 0) {
        Ip = other.Ip;
      }
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      serialId_.Add(other.serialId_);
      if (other.EyeId.Length != 0) {
        EyeId = other.EyeId;
      }
      if (other.CameraType != 0) {
        CameraType = other.CameraType;
      }
      if (other.Commit.Length != 0) {
        Commit = other.Commit;
      }
      if (other.Temp.Length != 0) {
        Temp = other.Temp;
      }
      if (other.IsLinux != false) {
        IsLinux = other.IsLinux;
      }
      if (other.IsUbuntu18 != false) {
        IsUbuntu18 = other.IsUbuntu18;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Ip = input.ReadString();
            break;
          }
          case 18: {
            Version = input.ReadString();
            break;
          }
          case 26: {
            serialId_.AddEntriesFrom(input, _repeated_serialId_codec);
            break;
          }
          case 34: {
            EyeId = input.ReadString();
            break;
          }
          case 40: {
            CameraType = input.ReadInt32();
            break;
          }
          case 50: {
            Commit = input.ReadString();
            break;
          }
          case 58: {
            Temp = input.ReadString();
            break;
          }
          case 64: {
            IsLinux = input.ReadBool();
            break;
          }
          case 72: {
            IsUbuntu18 = input.ReadBool();
            break;
          }
          case 82: {
            Time = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
